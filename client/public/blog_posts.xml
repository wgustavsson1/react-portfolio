<?xml version="1.0" encoding="UTF-8"?>
<posts>
    <post>
        <title type="text">Blog is under construction!</title>
        <author type="text">Wilhelm Gustavsson</author>
        <date type="text">2023-02-19</date>
        <content type="html">
            <p>Welcome to my blog! Currently the blog is under construction. </p>
            <img src="https://www.lawrenceprospera.org/images/quintana/Page_Under_Construction.jpg" alt="Under construction sign"/>
            <p>While you wait: here is an example of how to use the map function in Python</p>
            <code>
                def square(num):
                    return num**2

                 numbers = [1, 2, 3, 4, 5]

                squared_numbers = map(square, numbers)

                print(list(squared_numbers))
            </code>
        </content>
    </post>
    <post>
        <title type="text">Python Filter,Map and reduce</title>
        <author type="text">Wilhelm Gustavsson</author>
        <date type="text">2022-02-22</date>
        <content type="html">
            <p>Python is a powerful programming language that provides a number of built-in functions to help developers write efficient and concise code. Three of the most commonly used built-in functions in Python are filter(), map(), and reduce(). These functions are used for various purposes, including data processing, data filtering, and data transformation. In this post, we'll take a closer look at these three functions and how they can be used in Python.
            <br></br><br></br> The map() function is used to transform each element of a sequence based on a given function.
            <br></br> Here, the function parameter is a function that takes a single argument and returns either True or False. The iterable parameter is a sequence of elements that will be filtered.
                The filter() function returns a new sequence of elements that pass the condition specified in the function parameter. Let's take a look at an example:</p>
                <code>
                numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                def is_even(x):
                    return x % 2 == 0
                even_numbers = list(filter(is_even, numbers))
                print(even_numbers) # Output: [2, 4, 6, 8, 10]
                </code>
        </content>
    </post>
    <post>
        <title type="text">Javascript async keywords</title>
        <author type="text">Wilhelm Gustavsson</author>
        <date type="text">2022-03-20</date>
        <content type="html">
            <p> One of the important features of JavaScript is the ability to work with asynchronous code. Asynchronous programming is essential when dealing with long-running tasks or operations that rely on external resources. It allows you to write non-blocking code that can perform multiple tasks simultaneously, thus improving the performance and responsiveness of your application.
            <br></br><br></br> In JavaScript, the async keyword is used to define asynchronous functions. When you define a function as async, it returns a promise that can be resolved or rejected with the result of the function. The async keyword was introduced in ECMAScript 2017, and it has since become an important part of modern JavaScript development. To use the async keyword, you define a function with the async keyword before the function name. For example:</p>
            <code>
                async function fetchData() {
                const response = await fetch('https://example.com/data');
                const data = await response.json();
                return data;}
            </code>
            <p>In this example, the fetchData function is defined as async. The function performs an HTTP request using the fetch function, which returns a promise that resolves to a response object. The response object is then parsed using the json method, which also returns a promise. Finally, the data variable is returned as the result of the fetchData function.
            <br></br><br></br>The await keyword is used to wait for a promise to be resolved or rejected. When used inside an async function, the await keyword causes the function to pause execution until the promise is resolved or rejected. This makes it possible to write asynchronous code that looks like synchronous code, which can make it easier to reason about.</p>
            <code>
                async function example() {
                const result1 = await promise1();
                const result2 = await promise2();
                return result1 + result2;
                }
            </code>
            <p>In this example, the example function defines two variables, result1 and result2, which are set to the result of two asynchronous functions, promise1 and promise2. The function then returns the sum of these two results. The await keyword is used to wait for the promises to resolve before assigning their values to the variables.
            <br></br><br></br>When using the async keyword, it is important to handle errors properly. Any errors that occur inside an async function will be caught by the promise that is returned by the function. You can use the try and catch keywords to handle these errors.</p>
            <code>
            async function example() {
                try {
                    const result = await promise();
                    return result;
                } catch (error) {
                    console.error(error);
                }
            }
            </code>
            <p>In this example, the example function attempts to get the result of the promise function using the await keyword. If the promise is resolved successfully, the result is returned. If an error occurs, it is caught by the catch block, which logs the error to the console.
            <br></br><br></br>In conclusion, the async keyword is an important feature of modern JavaScript development. It allows you to write asynchronous code that is easy to reason about and can improve the performance and responsiveness of your application. When using the async keyword, it is important to handle errors properly and use the await keyword to wait for promises to resolve. By mastering asynchronous programming with JavaScript, you can create more efficient and effective web applications.</p>
        </content>
    </post>
</posts>